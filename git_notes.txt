---- GIT AND LOCAL REPOSITORIES ----

// OPEN FILE: to open files via command line, use the command 'start'.

// ls -a will show all the files (including hidden files such as .git when first initialised) 
	in your working directory

// in order to start tracking the changes made to files via git, then we need to add the file 
	to a staging area.

// GIT STATUS: to see what is currently in the staging area, the command is 'git status'.
	this also shows what files have been modified without being commited yet.

// GIT ADD: in order to add it to the staging area (the file is currently in the working directory) 
	and start tracking changes, we use the command 'git add {filename}'
	'git add .' adds every file into the staging area from the folder.

// COMMIT: to commit the file under version control, the command is 'git commit -m {message}'
	This places the file into your local repository.

// LOG: to see what commits you have made, use the 'git log' command - the hash uniquly identifies 
	the particular commit.

// GIT DIFF: the command 'git diff {filename}' shows what unsaved changes have been made to the file

// GIT CHECKOUT: this command will revert back to the last saved version 'git checkout {filename}'

---- GITHUB AND REMOTE REPOSITORIES ----

// GIT REMOTE: creating a remote repository. command 'git remote add {origin} {url of remote repository from github}'. 
	can call origin anything but this is the conventional way.

// GIT PUSH: pushes local repository to the remote repository using the -u flag. 
	name of remote: origin
	name of branch: master
	command: 'git push -u origin master'

---- GITIGNORE (passwords, api keys that you dont want to be open sourced on github) ----

// to remove all files from the staging area we use: 'git rm --cached -r .'

// we create a .gitignore file to store the names of the files we dont want pushed to 
	our remote repository.
	We can use '#' in the file to make comments, we can use * to specify a group of files to 
	be ignored e.g. '*.txt'. This will ignore all the text files. 

// so when we do 'git add .', we see that the files that are gitignored are no longer added to the 
	staging area.  

--

// CREATE THE FILE: touch .gitignore

// HIDE THE FILE: attrib +h .gitignore

// OPEN THE FILE: start .gitignore

---- GIT CLONE ---- 

// this is a way of getting projects from github and cloning it on your own system.

// once youve cloned a project and cd into it, you can git log to see their commit messages. 

// CLONE: git clone {remote repository url}

---- BRANCHING AND MERGING ----

// NEW BRANCH: git branch {name of new branch}

// CHECK BRANCHES: git branch

// SWITCHING BRANCHES: git checkout {name of branch}
